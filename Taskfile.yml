version: '3'

vars:
  VERSION:
    sh: grep 'Version =' cmd/version.go | cut -d '"' -f 2

tasks:
  build:
    desc: "Build the Go binary"
    cmds:
      - task: set-version
      - >
        go build -ldflags "
        -X github.com/klauern/pre-commit-llm/cmd.CommitHash={{.GIT_COMMIT}}
        -X github.com/klauern/pre-commit-llm/cmd.BuildDate={{.BUILD_DATE}}
        " -o dist/muse ./cmd/muse
    vars:
      GIT_COMMIT:
        sh: git rev-parse --short HEAD
      BUILD_DATE:
        sh: date -u '+%Y-%m-%d %H:%M:%S'

  set-version:
    internal: true
    cmds:
      - sed -i '' 's/Version = ".*"/Version = "{{.VERSION}}"/' cmd/version.go

  bump:patch:
    desc: "Bump patch version"
    cmds:
      - |
        VERSION=$(echo {{.VERSION}} | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
        task: set-version
        echo "Version bumped to $VERSION"

  bump:minor:
    desc: "Bump minor version"
    cmds:
      - |
        VERSION=$(echo {{.VERSION}} | awk -F. '{$2 = $2 + 1; $3 = 0;} 1' OFS=.)
        task: set-version
        echo "Version bumped to $VERSION"

  bump:major:
    desc: "Bump major version"
    cmds:
      - |
        VERSION=$(echo {{.VERSION}} | awk -F. '{$1 = $1 + 1; $2 = 0; $3 = 0;} 1' OFS=.)
        task: set-version
        echo "Version bumped to $VERSION"

  test:
    desc: "Run all Go tests (unit and integration)"
    cmds:
      - task: test:unit
      - task: test:integration

  test:unit:
    desc: "Run Go unit tests"
    cmds:
      - go test ./... -v

  test:integration:
    desc: "Run all Go integration tests"
    cmds:
      - go test ./... -v -tags=integration

  test:integration:anthropic:
    desc: "Run Anthropic integration tests"
    cmds:
      - go test ./llm -v -tags=integration -run TestAnthropicService

  test:integration:openai:
    desc: "Run OpenAI integration tests"
    cmds:
      - go test ./llm -v -tags=integration -run TestOpenAIService

  test:cover:
    desc: "Run tests with coverage, output and open the coverage report"
    cmds:
      - go test ./... -coverprofile=coverage.out
      - go tool cover -html=coverage.out -o coverage.html
      - open coverage.html

  test:cover:show:
    desc: "Show coverage for each package"
    cmds:
      - go test ./... -coverprofile=coverage.out
      - go tool cover -func=coverage.out

  test:cmd:
    desc: "Run tests for cmd package"
    dir: cmd
    cmds:
      - go test -v -coverprofile=coverage.out

  test:config:
    desc: "Run tests for config package"
    dir: config
    cmds:
      - go test -v -coverprofile=coverage.out

  test:rag:
    desc: "Run tests for rag package"
    dir: rag
    cmds:
      - go test -v -coverprofile=coverage.out

  test:templates:
    desc: "Run tests for templates package"
    dir: templates
    cmds:
      - go test -v -coverprofile=coverage.out

  test:hooks:
    desc: "Run tests for hooks package"
    dir: hooks
    cmds:
      - go test -v -coverprofile=coverage.out

  test:llm:
    desc: "Run tests for llm package"
    dir: llm
    cmds:
      - go test -v -coverprofile=coverage.out

  deps:
    desc: "Ensure gofumpt is installed"
    cmds:
      - go install mvdan.cc/gofumpt@latest
      - go get ./...

  format:
    desc: "Format Go code using gofumpt"
    cmds:
      - gofumpt -w .

  hooks:
    desc: "Run hooks defined in lefthook.yml"
    cmds:
      - lefthook run pre-commit

  lint:
    desc: "Run linters"
    cmds:
      - golangci-lint run --fast --timeout=5m ./...
    sources:
      - "**/*.go"

  test:goreleaser:
    desc: "Test GoReleaser configuration"
    cmds:
      - goreleaser build --snapshot --clean

  install:
    desc: "Install locally"
    cmds:
      - task: build
      - |
        if [ -n "$GOPATH" ] && [ -d "$GOPATH/bin" ]; then
          cp dist/muse "$GOPATH/bin/"
          echo "Installed muse to $GOPATH/bin/"
        elif [ -d "$HOME/go/bin" ]; then
          cp dist/muse "$HOME/go/bin/"
          echo "Installed muse to $HOME/go/bin/"
        else
          echo "Could not find a suitable installation directory."
          echo "Please make sure GOPATH is set or $HOME/go/bin exists."
          exit 1
        fi
